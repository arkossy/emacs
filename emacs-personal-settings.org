#+TITLE: Emacs Personal Settings in Org-mode
#+AUTHOR: Zsolt Arkossy
#+EMAIL: zsolt@arkossy.com
#+DATE: 2020-04-26 


* Commentary Notes 
Personal GNU Emacs configuration file.

Copyright (c) 2020 Zsolt Arkossy <zsolt@arkossy.com>

This file is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This file is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this file.  If not, see <http://www.gnu.org/licenses/>.

Commentary:

This file is the personal settings initialisation file for Emacs. 
The reason I created this file is that I wanted to separate the 
compulsory boot code from the custom settings and personal settings.
My emacs code structure has been influenced by learning from
Protesilaos Stavrou <info@protesilaos.com>.

See my dotfiles: https://https://github.com/arkossy

Code:




* GENERIC COMMANDS
** No Initial Splash Screen
#+BEGIN_SRC emacs-lisp 
(setq inhibit-startup-screen t)
#+END_SRC

** Always rebuild init
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (defun apollo/delete-emacs-init ()
    (interactive)
    (let ((configs "~/.emacs.d/emacs-personal-settings.el"))
      (when configs
        (delete-file configs))))
  :hook (kill-emacs . apollo/delete-emacs-init))
#+END_SRC

** C-u C-l Command Enablement
#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC

** Set TAB settings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "TAB") 'self-insert-command)
#+END_SRC

** Sentences end with a single space
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Set Cursor Blink Status 0 no, 1 yes
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC

** Set Text Wrapping 
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

** Add Matching Parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** No bell sound
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Fill paragraphs with a single space after each period
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** [inactive] Show Relative Number Lines
;#+BEGIN_SRC emacs-lisp
(setq display-line-numbers 'relative)
;#+END_SRC






* FILES AND FOLDER LOCATIONS

** Backup and autosave
#+BEGIN_SRC emacs-lisp
(defvar backup-dir (expand-file-name "/Users/apollo/.emacs.d/emacs-backups/"))
(defvar autosave-dir (expand-file-name "/Users/apollo/.emacs.d/emacs-autosave/"))
(setq backup-directory-alist (list (cons ".*" backup-dir)))
(setq auto-save-list-file-prefix autosave-dir)
(setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
#+END_SRC

** Add theme directory
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+END_SRC

** Default Startup Folder for C-x C-f
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/Documents/project-org")
#+END_SRC

** IDO - Interactively Do Things
Link:  https://www.emacswiki.org/emacs/InteractivelyDoThings

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-enable-last-directory-history t)
#+END_SRC

** IDO - Ignore certain files
#+BEGIN_SRC emacs-lisp
(add-to-list 'ido-ignore-files "emacs-personal-settings.el")
(add-to-list 'ido-ignore-files ".pia_manager_crash.log")

;Avoid certain directories:
;(setq ido-ignore-directories '("Applications/" "Library/" "Movies/" "Music/" "Pictures/" "Public/"))

#+END_SRC






* THEMES
** Fringe color
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'fringe nil :background nil)
#+END_SRC

#+RESULTS:

** [inactive] Theme Looper
Link: https://github.com/myTerminal/theme-looper
#+BEGIN_SRC emacs-lisp
(require 'theme-looper)
(global-set-key (kbd "C-}") 'theme-looper-enable-next-theme)
(theme-looper-set-favorite-themes '(modus-operandi modus-vivendi))
#+END_SRC
 



* WINDOW MANAGEMENT

** Enable Save Window Settings
#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
#+END_SRC

** Windmove - Move between windows
#+BEGIN_SRC emacs-lisp
;; Use CMD+arrows
(windmove-default-keybindings 'super)
;; Don't cycle around at edges (nil), enabled (t)
(setq windmove-wrap-around nil)
#+END_SRC

** [inactive] Screen Position
;#+BEGIN_SRC emacs-lisp
(setq default-frame-alist '((left . 82) (top . 38) (width . 100) (height . 70)))
;#+END_SRC






* EDITING

** Olivetti Mode
Link: https://github.com/myTerminal/theme-looper
#+BEGIN_SRC emacs-lisp
(require 'olivetti)
(global-set-key (kbd "C-{") 'olivetti-mode)
#+END_SRC

** Multiple Cursor
Link: https://github.com/magnars/multiple-cursors.el
#+BEGIN_SRC emacs-lisp
;; on error delete the content of: .mc-lists.el
(require 'multiple-cursors)
(global-set-key (kbd "M-m") 'mc/edit-lines)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Autocomplete
Link: https://github.com/auto-complete/auto-complete
#+BEGIN_SRC emacs-lisp
(ac-config-default)
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t
:init
(which-key-mode))
#+END_SRC








* ORG MODE - GENERAL

** Set maximum indentation for description lists
#+BEGIN_SRC emacs-lisp
(setq org-list-description-max-indent 5)
#+END_SRC

** Prevent demoting heading also shifting text inside sections
#+BEGIN_SRC emacs-lisp
(setq org-adapt-indentation nil)
#+END_SRC




** Create Custom ID <f5> Copy to Clipboard <f6>
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'org-id-get-create)

(defun my/copy-id-to-clipboard() "Copy the ID property value to killring,
if no ID is there then create a new unique ID. 
This function works only in org-mode buffers.

The purpose of this function is to easily construct id:-links to 
org-mode items. If its assigned to a key it saves you marking the
text and copying to the killring."
       (interactive)
       (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
	 (setq mytmpid (funcall 'org-id-get-create))
	 (kill-new mytmpid)
	 (message "Copied %s to killring (clipboard)" mytmpid)
       ))

(global-set-key (kbd "<f6>") 'my/copy-id-to-clipboard)
#+END_SRC
- Source Code: [[https://koenig-haunstetten.de/2016/07/09/code-snippet-for-orgmode-e05s02/][Link]]

** [inactive] Add Custom ID to all headers when saving
;#+BEGIN_SRC emacs-lisp
(defun my/org-add-ids-to-headlines-in-file ()
  "Add ID properties to all headlines in the current file which
do not already have one."
  (interactive)
  (org-map-entries 'org-id-get-create))

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))

(defun my/copy-id-to-clipboard() "Copy the ID property value to killring,
if no ID is there then create a new unique ID. 
This function works only in org-mode buffers.

The purpose of this function is to easily construct id:-links to 
org-mode items. If its assigned to a key it saves you marking the
text and copying to the killring."
       (interactive)
       (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
	 (setq mytmpid (funcall 'org-id-get-create))
	 (kill-new mytmpid)
	 (message "Copied %s to killring (clipboard)" mytmpid)
       ))

(global-set-key (kbd "<f5>") 'my/copy-id-to-clipboard)
;#+END_SRC
- Source Code: [[https://koenig-haunstetten.de/2016/07/09/code-snippet-for-orgmode-e05s02/][Link]]

** [inactive] Add custom colors to A/B/C categories
;#+BEGIN_SRC emacs-lisp
(setq org-priority-faces '((?A . (:foreground "red" :weight 'bold))
                           (?B . (:foreground "orange"))
                           (?C . (:foreground "blue"))))
;#+END_SRC




* ORG MODE - BERNT HANSEN SETTINGS
    
** Hansen Link 
http://doc.norang.ca/org-mode.html#HowToUseThisDocument

** Set org directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Documents/project-org")
#+END_SRC

** org-mode is default for '.org' files
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\)$" . org-mode))
(require 'org)
#+END_SRC

** Document reference link management
;; To copy the link: C-a l
;; To paste the link: C-a C-l
;; To open a link: C-a C-o
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
#+END_SRC

** Open Agenda
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
#+END_SRC

** List of Agenda files to be scanned
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list "~/Documents/project-org"))
#+END_SRC
- If the agenda is not showing up then: 'C-c ['

** Keywords colors
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "#3a70af" :weight bold)
              ("NEXT" :foreground "#cc0000" :weight bold)
              ("DONE" :foreground "#00994d" :weight bold)
              ("WAITING" :foreground "#ff8833" :weight bold)
              ("HOLD" :foreground "#ff8833" :weight bold)
              ("CANCELLED" :foreground "#177a21" :weight bold))))
#+END_SRC

** Fast todo status change (C-c C-t)
#+BEGIN_SRC emacs-lisp
(setq org-use-fast-todo-selection t)
#+END_SRC

** Capture mode: C-c c
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

** [inactive] Set default inbox file
;#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/Documents/project-org/org-inbox.org")
;#+END_SRC

** [inactive] Keywords structure
;#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))
;#+END_SRC

** [inactive] State change Tag triggers
l#+BEGIN_SRC emacs-lisp
Moving a task to CANCELLED adds a CANCELLED tag
Moving a task to WAITING adds a WAITING tag
Moving a task to HOLD adds WAITING and HOLD tags
Moving a task to a done state removes WAITING and HOLD tags
Moving a task to TODO removes WAITING, CANCELLED, and HOLD tags
Moving a task to NEXT removes WAITING, CANCELLED, and HOLD tags
Moving a task to DONE removes WAITING, CANCELLED, and HOLD tags
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
;#+END_SRC
